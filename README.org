*Warning:* This is completely work in progress, and nowhere near a
releasable state.

*group* is a small c++11 template library for doing differential
geometry in Lie groups. It can be used to automatically compute
complicated derivatives/pullbacks, for instance when dealing with
robot kinematics.

*group* tries to provide a high degree of flexibility by providing a
collection of small, atomic functions that can be chained together to
form more complex functions. This composition happens at compile time,
so that the compiler will +beg for mercy+ do its best to produce
efficient code.

You can use your custom data types with *group* by implementing a few
/trait classes/ describing Euclidean and Lie group operations. Since
most of the functions in ~group~ only use these interfaces, you will
be able to use them right away in your code. For instance, you can use
*Eigen* vectors with *group*.

* TODO Examples

Here is a small example:

: // alias Eigen vectors
: typedef Eigen::Vector3d vec3;
:  
: vec3 u = vec3::Ones();
:
: // vector line with direction u
: func::line<vec3> line(u);
:
: // v == (0.5, 0.5, 0.5)
: vec3 v = line(0.5);
:
: // construct a more complex function by composing line and
: // squared norm functions
: auto f = func::norm2<vec3>() << line;
:
: // real variable alpha, equals 3
: RR alpha = f(1.0);
:
: // derivative of f at 1.0
: auto df = func::d(f)(1.0)
:
: // derive f at 1.0, along tangent vector 2.0
: RR beta = df(2.0);
: 
: // TODO more...

* TODO Usage

* TODO Documentation


